#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');
const chalk = require('chalk');
const log = console.log
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3333');
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback());

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,()=>{
  log(chalk.green(`服务已启动，端口号为${port}`))
  log(chalk.green(`请打开 http://localhost:${port}`))
  log(chalk.green(`或者 http://${getLocalIP()}:${port}`))
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//获取本机ip
function getLocalIP() {
  const os = require(`os`);
  const ifaces = os.networkInterfaces();
  let locatIp = ``;
  if(!!ifaces.en6){
    let en6 = ifaces.en6
    locatIp = (en6.filter(e=>e.family === 'IPv4')[0]).address
  }else{
    for (let dev in ifaces) {
      if (dev === `本地连接`) {
        for (let j = 0;j < ifaces[dev].length;j++) {
          if (ifaces[dev][j].family === `IPv4`) {
            locatIp = ifaces[dev][j].address;
            break;
          }
        }
      }
    }
  }
  return locatIp;
}